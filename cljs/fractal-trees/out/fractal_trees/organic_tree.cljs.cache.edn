{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name fractal-trees.organic-tree, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware}, :uses nil, :defs {maxDepth {:name fractal-trees.organic-tree/maxDepth, :file "src/fractal_trees/slider_tree.cljs", :line 5, :column 1, :end-line 5, :end-column 14, :meta {:file "/home/halvards/Projects/clojure/cljs/fractal-trees/src/fractal_trees/slider_tree.cljs", :line 5, :column 6, :end-line 5, :end-column 14}, :tag number}, dl {:name fractal-trees.organic-tree/dl, :file "src/fractal_trees/slider_tree.cljs", :line 6, :column 1, :end-line 6, :end-column 8, :meta {:file "/home/halvards/Projects/clojure/cljs/fractal-trees/src/fractal_trees/slider_tree.cljs", :line 6, :column 6, :end-line 6, :end-column 8}, :tag number}, setup {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojure/cljs/fractal-trees/src/fractal_trees/slider_tree.cljs", :line 8, :column 7, :end-line 8, :end-column 12, :arglists (quote ([]))}, :name fractal-trees.organic-tree/setup, :variadic false, :file "src/fractal_trees/slider_tree.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, update-state {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojure/cljs/fractal-trees/src/fractal_trees/slider_tree.cljs", :line 14, :column 7, :end-line 14, :end-column 19, :arglists (quote ([state]))}, :name fractal-trees.organic-tree/update-state, :variadic false, :file "src/fractal_trees/slider_tree.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, branch {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojure/cljs/fractal-trees/src/fractal_trees/slider_tree.cljs", :line 17, :column 7, :end-line 17, :end-column 13, :arglists (quote ([len width depth angle]))}, :name fractal-trees.organic-tree/branch, :variadic false, :file "src/fractal_trees/slider_tree.cljs", :end-column 13, :method-params ([len width depth angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 4, :fn-var true, :arglists (quote ([len width depth angle]))}, draw-state {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojure/cljs/fractal-trees/src/fractal_trees/slider_tree.cljs", :line 31, :column 7, :end-line 31, :end-column 17, :arglists (quote ([state]))}, :name fractal-trees.organic-tree/draw-state, :variadic false, :file "src/fractal_trees/slider_tree.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, fractal-trees {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojure/cljs/fractal-trees/src/fractal_trees/slider_tree.cljs", :line 38, :column 14, :end-line 38, :end-column 27, :export true, :arglists (quote ([]))}, :name fractal-trees.organic-tree/fractal-trees, :variadic false, :file "src/fractal_trees/slider_tree.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:features :hsb :fn :update :angle :size :setup :middleware :host :keep-on-top :host-id :no-start :draw}, :order [:hsb :angle :host :features :keep-on-top :update :size :setup :middleware :draw :no-start :fn :host-id]}, :doc nil}